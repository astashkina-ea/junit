package homework.junit;

import com.google.common.reflect.ClassPath;
import org.junit.jupiter.api.*;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Set;
import java.util.stream.Collectors;

//–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (advanced!).
// –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª–∞—Å—Å http://github.com/qa-guru/qa_guru_13_6_junit/blob/master/src/test/java/junit/SimpleJUnit.java
// –∏–∑ —Ä–µ–ø–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–± –æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ @BeforeEach / @AfterEach, @BeforeAll/AfterAll
// (–Ω–∞–¥–æ –ø–æ—á–∏—Ç–∞—Ç—å –æ —Ç–æ–º, –∫–∞–∫ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã —á–µ—Ä–µ–∑ invoke() –∏ –ø–æ–¥—É–º–∞—Ç—å, –≤ –∫–∞–∫–∏–µ –º–µ—Å—Ç–∞ —Ü–∏–∫–ª–æ–≤ —ç—Ç–æ –≤—Å—Ç–∞–≤–ª—è—Ç—å üôÇ)

public class SimpleJunit {
    public static void main(String[] args) throws Exception {
        //–º–µ—Ç–æ–¥ main –∑–∞–ø—É—Å–∫–∞—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∑–µ–ª–µ–Ω—É—é –∫–Ω–æ–ø—á–∫—É –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
        // –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ª—é–±–æ–π java –ø—Ä–æ–≥—Ä–∞–º–º–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ—Ç–æ–¥ main, –≤ —Ç–µ—Å—Ç–∞—Ö –æ–Ω –≤—Å—Ç—Ä–æ–µ–Ω –≤ junit, –∫–æ—Ç–æ—Ä—ã–π
        // –î–æ—Å—Ç–∞–µ—Ç –≤—Å–µ –∫–ª–∞—Å—Å—ã –∏–∑ src test java
        Set<? extends Class<?>> classes = ClassPath.from(ClassLoader.getSystemClassLoader()) //ClassLoader - –∏—â–µ—Ç –≤—Å–µ –∫–ª–∞—Å—Å—ã –≤ –Ω–∞—à–µ–π  –ø—Ä–æ–≥–æ–º–º–∞–µ (getSystemClassLoader) –∏ –≤—Å–µ —Ñ–∞–π–ª—ã –≤ —Ä–µ—Å—É—Ä—Å–∫–∞—Ö
                .getAllClasses()
                .stream()
                .filter(classInfo -> classInfo.getPackageName().contains("simpleTests"))
                .map(ClassPath.ClassInfo::load)
                .collect(Collectors.toSet());
        for (Class<?> aClass : classes) {
            runBeforeAll(aClass);
            Method[] methods = aClass.getDeclaredMethods();
            for (Method method : methods) { //–ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –º–µ—Ç–æ–¥–∞–º –∫–ª–∞—Å—Å–∞
                // –°–º–æ—Ç—Ä–∏—Ç –≤ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–æ–≤ –Ω–µ—Ç –ª–∏ —Ç–∞–º @Test
                Test testAnnotation = method.getAnnotation(Test.class);
                if (testAnnotation != null) {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
                    method.setAccessible(true);
                    try {
                        runBeforeEach(aClass);
                        method.invoke(aClass.getDeclaredConstructor().newInstance());
                    } catch (Throwable t) {
                        // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –≤—ã–±—Ä–æ—Å–∏–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å —Ç–∏–ø–æ–º AssertionError - –∂–µ–ª—Ç—ã–π —Ç–µ—Å—Ç
                        if (AssertionError.class.isAssignableFrom(t.getCause().getClass())) {
                            System.out.println("–¢–µ—Å—Ç: " + method.getName() + " –∂–µ–ª—Ç—ã–π");
                        } else {
                            // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –≤—ã–±—Ä–æ—Å–∏–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å –ª—é–±—ã–º –¥—Ä—É–≥–∏–º - –∫—Ä–∞—Å–Ω—ã–π —Ç–µ—Å—Ç
                            System.out.println("–¢–µ—Å—Ç: " + method.getName() + " –∫—Ä–∞—Å–Ω—ã–π");
                        }
                        continue;
                    }
                    // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è - –∑–µ–ª–µ–Ω—ã–π —Ç–µ—Å—Ç
                    System.out.println("–¢–µ—Å—Ç :" + method.getName() + " –∑–µ–ª–µ–Ω—ã–π");
                    runAfterEach(aClass);
                }
            }
            runAfterAll(aClass);
        }
    }

    public static void runBeforeAll(Class<?> aClass) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        Method[] methods = aClass.getDeclaredMethods();
        for (Method method : methods) {
            BeforeAll beforeAllAnnotation = method.getAnnotation(BeforeAll.class);
            if (beforeAllAnnotation != null) {
                method.setAccessible(true);
                method.invoke(aClass.getDeclaredConstructor().newInstance());
            }
        }
    }

    public static void runAfterAll(Class<?> aClass) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        Method[] methods = aClass.getDeclaredMethods();
        for (Method method : methods) {
            AfterAll afterAllAnnotation = method.getAnnotation(AfterAll.class);
            if (afterAllAnnotation != null) {
                method.setAccessible(true);
                method.invoke(aClass.getDeclaredConstructor().newInstance());
            }
        }
    }

    public static void runBeforeEach(Class<?> aClass) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        Method[] methods = aClass.getDeclaredMethods();
        for (Method method : methods) {
            BeforeEach beforeEachAnnotation = method.getAnnotation(BeforeEach.class);
            if (beforeEachAnnotation != null) {
                method.setAccessible(true);
                method.invoke(aClass.getDeclaredConstructor().newInstance());
            }
        }
    }

    public static void runAfterEach(Class<?> aClass) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        Method[] methods = aClass.getDeclaredMethods();
        for (Method method : methods) {
            AfterEach afterEachEachAnnotation = method.getAnnotation(AfterEach.class);
            if (afterEachEachAnnotation != null) {
                method.setAccessible(true);
                method.invoke(aClass.getDeclaredConstructor().newInstance());
            }
        }
    }
}
